---
title: "utsiraenv"
format: html
editor: visual
---

## Library

```{r}
library(ncdf4)
library(here)
library(readr)
library(ggplot2)
library(plotly)
library(dplyr)
library(terra)

library(reshape2)
library(metR)

#library(ggspatial)
#library(rnaturalearth)

#Required for DEB model runs
source("SolveR_R.R")
source("KelpDEB_model_Venolia.R")
source("DEB_params.R") # this script store the parameters for easy tracking.
#source("calibration_kelp.R")
source("single_kelp_run.R")

source("get_production_kelp.R")
library(data.table)
library(future.apply)
plan(multisession)

#Required for 
source("DATA_UTSIRA/get_food_flux.R")
source("DATA_UTSIRA/plot_outputs.R")

#Utsira coordinates in NORWECOM.e2e format 
coords <- read.table('DATA_UTSIRA/utsira_park_coords.txt', header=TRUE, sep='\t')
```

```{r}
#x and y surface coordinates 
#z layers of depth 
#t time 

file = "DATA_UTSIRA/all_fluxes2020_01.nc" #file containing the NORWECOM.e2e output

nc <- nc_open(file)

#depth = 3 # The depth in m you want to get the layer of (gets the closest layer)
#type = 'mean' #if 'mean' then computes the annual mean for each x,y location
#grid = 800 # this is the cell side size for the model in m
#out = 'N'
#'N' = Inorganic nitrogen 
#'P' = Phosphorous 

#Run to get the food flux 
#food = get_food_flux(file=file, grid=grid, depth=depth, type=type, out=out)

#food comes out as : mgN/m2/s, mgP/m2/s


```

```{r}
#Mean inorganic nitrogen  
food_N_mean <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, type="mean", out='N')

food_N <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, out='N')

#Phosphorous 
food_P_mean <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, type="mean", out='P')

food_P <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, out='P')
```

## Plot

```{r}

## Inorganic Nitrogen mean over the year 
name_var = name=expression(paste('Inorganic nitrogen, mmolN',m^-2,'',s^-1, sep='')) #What food, and unit of measurement 

plots_N <- plot_outputs(food_N_mean, timesteps = NULL, scale='linear',crop=c(80,170,50,140), name_var = name_var)

plots_N[[1]]=plots_N[[1]]+
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA)+
  theme(legend.position = "top",
        legend.key.width=unit(0.1,"npc"),
    legend.margin = margin(), 
    legend.spacing.x = unit(0, "cm"))


plots_N[[1]]


## Phosphouros mean over the year 
name_var2 = name=expression(paste('Phosphorous, mmolP ',m^-2,'',s^-1, sep='')) #What food, and unit of measurement 

plots_P <- plot_outputs(food_P_mean, timesteps = NULL, scale='linear',crop=c(80,170,50,140), name_var = name_var2)

plots_P[[1]]=plots_P[[1]]+
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA)+
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA)+
  theme(legend.position = "top",
        legend.key.width=unit(0.1,"npc"),
    legend.margin = margin(), 
    legend.spacing.x = unit(0, "cm"))


plots_P[[1]]

```

## Time limits

Limit to months october - may , since its when the kelp would be deployed

```{r}
file = "DATA_UTSIRA/all_fluxes2020_01.nc" #file containing the NORWECOM.e2e output
depth = 3 # The depth in m you want to get the layer of (gets the closest layer)
type = 'timestep' #if 'mean' then computes the annual mean for each x,y location
grid = 800 # this is the cell side size for the model in m
out = 'N'
#'N' = Inorganic nitrogen 
#'P' = Phosphorous 

#food = get_food_flux(file=file, grid=grid, depth=depth, type='timestep', out = out)
#food_produc <- food
#food_produc$food_index <- food_produc$food_index[, , c(1:151, 273:364)]

# 1 st january and out may : days 151 
# 273 days until 1st october
# 365 end of year 
time_points <- c(1:151, 273:364)



#Depth 3 m 
food_N_mean_3 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, type="timestep", out='N')
food_P_mean_3 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=3, type="timestep", out='P')

food_N_mean_3_t <- food_N_mean_3
food_N_mean_3_t$food_index <- food_N_mean_3_t$food_index[ , ,time_points]
food_N_mean_3_t$food_index <- apply(food_N_mean_3_t$food_index, 1:2, mean)

food_P_mean_3_t <- food_P_mean_3
food_P_mean_3_t$food_index <- food_P_mean_3_t$food_index[ , ,time_points]
food_P_mean_3_t$food_index <- apply(food_P_mean_3_t$food_index, 1:2, mean)

#Depth 6 m 
food_N_mean_6 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=6, type="timestep", out='N')
food_P_mean_6 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=6, type="timestep", out='P')

food_N_mean_6_t <- food_N_mean_6
food_N_mean_6_t$food_index <- food_N_mean_6_t$food_index[ , ,time_points]
food_N_mean_6_t$food_index <- apply(food_N_mean_6_t$food_index, 1:2, mean)

food_P_mean_6_t <- food_P_mean_6
food_P_mean_6_t$food_index <- food_P_mean_6_t$food_index[ , ,time_points]
food_P_mean_6_t$food_index <- apply(food_P_mean_6_t$food_index, 1:2, mean)

#Depth 9 m 
food_N_mean_9 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=9, type="timestep", out='N')
food_P_mean_9 <- get_food_flux("DATA_UTSIRA/all_fluxes2020_01.nc", grid=800, depth=9, type="timestep", out='P')

food_N_mean_9_t <- food_N_mean_9
food_N_mean_9_t$food_index <- food_N_mean_9_t$food_index[ , ,time_points]
food_N_mean_9_t$food_index <- apply(food_N_mean_9_t$food_index, 1:2, mean)

food_P_mean_9_t <- food_P_mean_9
food_P_mean_9_t$food_index <- food_P_mean_9_t$food_index[ , ,time_points]
food_P_mean_9_t$food_index <- apply(food_P_mean_9_t$food_index, 1:2, mean)
```

```{r}
library(ggplot2)
library(patchwork)
library(scales)

# Max value of N and P for colour scales to be the same across all plots 
max_val_N <- max(c(food_N_mean_3_t$food_index, food_N_mean_6_t$food_index, food_N_mean_9_t$food_index), na.rm = TRUE)
max_val_P <- max(c(food_P_mean_3_t$food_index, food_P_mean_6_t$food_index, food_P_mean_9_t$food_index), na.rm = TRUE)

name_var_N <- expression(paste('Inorganic nitrogen, mmolN',m^-2,' s'^-1))
name_var_P <- expression(paste('Phosphorous, mmolP ',m^-2,' s'^-1))

```

```{r}
#ggsave("plots/test2.jpg", width = 16, height = 8, dpi = 300)
```

```{r}
#3 m 
plots_N_3 <- plot_outputs(food_N_mean_3_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_N)
plots_P_3 <- plot_outputs(food_P_mean_3_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_P)

plots_N_3[[1]] <- plots_N_3[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_N), name = name_var_N) +
  #annotate("text", x = 85, y = 135, label = "Depth: 3 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

plots_P_3[[1]] <- plots_P_3[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_P), name = name_var_P) +
  #annotate("text", x = 85, y = 135, label = "Depth: 3 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

#plot_3m_combined <- plots_N_3[[1]] + plots_P_3[[1]]

#plot_3m_combined

plots_N_3

#ggsave("plots/test2.jpg", width = 5, height = 5, dpi = 300)
```

```{r}
# 6m
plots_N_6 <- plot_outputs(food_N_mean_6_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_N)
plots_P_6 <- plot_outputs(food_P_mean_6_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_P)

plots_N_6[[1]] <- plots_N_6[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_N), name = name_var_N) +
  annotate("text", x = 85, y = 135, label = "Depth: 6 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

plots_P_6[[1]] <- plots_P_6[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_P), name = name_var_P) +
  annotate("text", x = 85, y = 135, label = "Depth: 6 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

# 9m
plots_N_9 <- plot_outputs(food_N_mean_9_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_N)
plots_P_9 <- plot_outputs(food_P_mean_9_t, scale='linear', crop=c(80,170,50,140), name_var=name_var_P)

plots_N_9[[1]] <- plots_N_9[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_N), name = name_var_N) +
  annotate("text", x = 85, y = 135, label = "Depth: 9 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

plots_P_9[[1]] <- plots_P_9[[1]] +
  scale_fill_gradientn(colors = rev(terrain.colors(100)), limits = c(0, max_val_P), name = name_var_P) +
  annotate("text", x = 85, y = 135, label = "Depth: 9 m", size = 5, hjust = 0) +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  theme(legend.position = "top",
        legend.key.width = unit(0.1,"npc"),
        legend.margin = margin(),
        legend.spacing.x = unit(0, "cm"))

# Combine
plot_6_9_combined <- (plots_N_6[[1]] + plots_P_6[[1]]) / (plots_N_9[[1]] + plots_P_9[[1]])

```

## Combined nutrient plots final

```{r}

P_combined <- plots_P_3[[1]] / plots_P_6[[1]] / plots_P_9[[1]] + 
  plot_layout(guides = "collect") &
  theme_minimal(base_size = 12) &
  theme(legend.position = "top",
  legend.key.width = unit(2, "cm"),  # wider color bar
  legend.key.height = unit(0.4, "cm"), # thinner vertical height
  legend.text = element_text(size = 10),
  legend.title = element_text(size = 12, face = "bold"))

P_combined

#ggsave("plots/test2.jpg", width = 8, height = 24, dpi = 300)
```

```{r}
N_combined <- plots_N_3[[1]] / plots_N_6[[1]] / plots_N_9[[1]] + 
  plot_layout(guides = "collect") &
  theme_minimal(base_size = 12) &
  theme(legend.position = "top",
  legend.key.width = unit(2, "cm"),  # wider color bar
  legend.key.height = unit(0.4, "cm"), # thinner vertical height
  legend.text = element_text(size = 10),
  legend.title = element_text(size = 12, face = "bold"))

N_combined

#ggsave("plots/test2.jpg", width = 8, height = 24, dpi = 300)
```

# Forcings

(exracted from 3 m depth)

I = PAR

T = K

Current = m / s

```{r}
# 3 m 
forcings_farmloc_3 <- read_csv("data/forcings_farmloc_3m.csv") %>% 
  mutate(CO_2 = 0.00214)

forcings <- forcings_farmloc_3 %>% 
  select(-N)
forcings <- forcings[forcings$datetime >= as.POSIXct("2019-11-01", tz = "UTC"), ]
head(forcings)
```

```{r}
#Summary forcings 
summary_utsira_3 <- forcings_utsira %>% 
  mutate(datetime = as.POSIXct(datetime),  # Convert to POSIXct
         date = as.Date(datetime) ,  
         temperature = temperature - 273.15) %>%  # Convert from Kelvin to Celsius
  group_by(date) %>% 
  summarise(
    sum_I = sum(I, na.rm = TRUE),  # Sum of irradiance per day
    mean_T = mean(temperature, na.rm = TRUE),  # Mean temperature per day
    mean_speed = mean(abs(speed), na.rm = TRUE)
  ) %>% 
  mutate(date = as.POSIXct(date))

summary_utsira_6 <- forcings_utsira_6m %>% 
  mutate(datetime = as.POSIXct(datetime),  # Convert to POSIXct
         date = as.Date(datetime),  
         temperature = temperature - 273.15) %>%  # Convert from Kelvin to Celsius
  group_by(date) %>% 
  summarise(
    sum_I = sum(I, na.rm = TRUE),  # Sum of irradiance per day
    mean_T = mean(temperature, na.rm = TRUE)  # Mean temperature per day
  ) %>% 
  mutate(date = as.POSIXct(date))

summary_utsira_9 <- forcings_utsira_9m %>% 
  mutate(datetime = as.POSIXct(datetime),  # Convert to POSIXct
         date = as.Date(datetime),  
         temperature = temperature - 273.15) %>%  # Convert from Kelvin to Celsius
  group_by(date) %>% 
  summarise(
    sum_I = sum(I, na.rm = TRUE),  # Sum of irradiance per day
    mean_T = mean(temperature, na.rm = TRUE)  # Mean temperature per day
  ) %>% 
  mutate(date = as.POSIXct(date))
```

```{r}

custom_light_palette <- c(
  "0 m" = "#F7D568",       
  "3 m" = "#EBB540", 
  "6 m" = "#B98A1C"  
)

#"#B98A1C", "#EBB540", "#F7D568", "#FBEBA2"


#Plot Irradiance 
I_plot <- ggplot() + 
  geom_line(data = summary_utsira_3, aes(x = date, y = sum_I, colour = "0 m"), size = 0.8) + 
  geom_line(data = summary_utsira_6, aes(x = date, y = sum_I, colour = "3 m"), size = 0.5) +
  geom_line(data = summary_utsira_9, aes(x = date, y = sum_I, colour = "6 m")) +
  labs(y = expression(paste('mol I# ',m^-1, d^-1, sep='')),
       title = "Sum of Irradiance pr. day", 
       x = "", colour = "Depth") + 
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove vertical grid lines
    panel.grid.minor.x = element_blank() #, 
    #legend.position = c(0.1, 0.9),  # Move legend to top-left
    #legend.justification = c(0, 1), # Align legend to the corner
    #legend.background = element_rect(fill = "white", color = NA), 
    #legend.key = element_blank()
  ) + 
  scale_colour_manual(values = custom_light_palette)


#Plot temperature 
temp_plot <- ggplot() + 
  geom_line(data = summary_utsira_3, aes(x = date, y = mean_T), color = "#0273B3", linewidth = 0.8) +
  labs(y = "Celsius", 
       title = "Average Temperature pr. day", 
       x = "") + 
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove vertical grid lines
    panel.grid.minor.x = element_blank()
  )

temp_plot 
I_plot

```

```{r}
custom_current_palette <- c(
  "Current and direction pr. hour" = "#A7D3E5",       
  "Absolute mean pr.day" = "#0273B3" 
)
speed_breaks <- c(0, 0.025, 0.05, 0.1, 0.2, 0.4, 0.5, Inf)

ggplot() + 
  geom_line(data = forcings_utsira, aes(x = datetime, y = speed, color = "Current and direction pr. hour")) +
  geom_line(data = summary_utsira_3, aes(x = date, y = mean_speed, color = "Absolute mean pr.day"), linewidth = 0.8) +
  labs(y = "Speed (m/s)", 
       title = "Current speed and direction", 
       x = "Date", 
       colour = "Speed") + 
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  scale_y_continuous(breaks = c(-0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)) +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove vertical grid lines
    panel.grid.minor.x = element_blank(), 
    legend.position = "bottom",  # Move legend to top-left
    legend.background = element_rect(fill = "white", color = NA), 
    legend.key = element_blank()
  ) + 
  scale_colour_manual(values = custom_current_palette)

#ggsave("plots/current_utsira.jpg", width = 6, height = 4, dpi = 300)
```

# Production potential

```{r}
pars <- load_pars()
params_Lo <- pars$p
formatted <- format(pars$params, digits=2)
knitr::kable(formatted[,2:5], caption='Kelp DEB Parameter list')
remove(formatted)

#temporary , place in DEB_params.R ?
# definition of molecular weights  
w_V <-  29.89 #w_O[3]  # g/mol       #molecular weight of structure
w_EN <- 54 #w_O[4]  # g/mol      #molecular weight of N reserve
w_EC <- 30 #w_O[5]  #g/mol       #molecular weight of C reserve
w_O2 <- 32 #g/mol

#Initial state, same as october deployment values from Austevoll 
W <- 0.0000205028936
m_EC <- 0.39
m_EN <- 0.1
M_V = W/(w_V+m_EN*w_EN+m_EC*w_EC)
initial_state <- list(W = W, m_EC = m_EC, m_EN = m_EN, M_V = M_V)
```

```{r}
#x and y surface coordinates 
#z layers of depth 
#t time 
source("get_production_kelp.R")

file = "DATA_UTSIRA/dumpnut2020_01.nc" #file containing the NORWECOM.e2e output
#'Nit' : micromol Nitrate pr. cubic meter

'forcings_utsira <- read_csv("data/forcings_utsira.csv") %>% 
  mutate(CO_2 = 0.00214)'

#forcings = forcings_utsira #forcings for modelling kelp
#datetime : POSIXCT date and time starts when kelp is deployed, harvest is end of dataset
#I : Irradiance (PAR)
#temperature: Kelvin 

depth = 3 # The depth in m you want to get the layer of (gets the closest layer)
grid = 800 # this is the cell side size for the model in m

#Run to get the production potential of kelp
prod = get_production_kelp(file=file, forcings=forcings, grid=grid, depth=depth, initial_state = initial_state)

#Single kelp comes out as DW g 

#write.csv(prod, here::here("data", "production_area.csv"), row.names = FALSE)

#prod <- read_csv("data/production_area.csv")
# Save each matrix in the list to separate CSV files

#Write csv files to save the get_production output
'write.csv(prod$single_kelp, "data/single_kelp.csv", row.names = FALSE)
write.csv(prod$production, "data/production.csv", row.names = FALSE)
write.csv(prod$lat, "data/lat.csv", row.names = FALSE)
write.csv(prod$lon, "data/lon.csv", row.names = FALSE)
write.csv(prod$topo, "data/topo.csv", row.names = FALSE)'

#Load production to not have to run the whole code 
'single_kelp <- as.matrix(read.csv("data/single_kelp.csv"))
production  <- as.matrix(read.csv("data/production.csv"))
lat         <- as.matrix(read.csv("data/lat.csv"))
lon         <- as.matrix(read.csv("data/lon.csv"))
topo        <- as.matrix(read.csv("data/topo.csv"))

prod <- list(
  single_kelp = single_kelp,
  production  = production,
  lat         = lat,
  lon         = lon,
  topo        = topo
)'
```

```{r}
## 

greens <- c("#FFFFFF", "#C6E8B2", "#8FD470", "#4CAF3D", "#0B6614")
#greens <- c("white","yellow","green", "blue") #better contrast to explore

#name_var = name=expression(paste('Single kelp growth grams DW/',m^-2, sep='')) #What food, and unit of measurement 
name_var = expression(paste('Individual kelp growth (g DW)', sep='')) #What food, and unit of measurement

#New dataframe to rename single kelp as food index 
prod3 <- prod
prod3$production <- NULL
names(prod3)[names(prod3) == "single_kelp"] <- "food_index"

#Indices for point 
i_ind <- 93
j_ind <- 141

#Least productive
i_ind_min <- 84 # 
j_ind_min <- 125 # 

size_value <- prod3$food_index[j_ind, i_ind]

i_lat <- prod3$lat[j_ind, i_ind]
j_lon <- prod3$lon[j_ind, i_ind]

plots_N <- plot_outputs(prod3, timesteps = NULL, scale='linear',crop=c(80,170,50,140), name_var = name_var)


plot_full <- plots_N[[1]] +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_point(aes(x = j_ind, y = i_ind), color = "white", size = 3) +
  geom_point(aes(x = j_ind_min, y = i_ind_min), color = "black", size = 3) +
  scale_fill_gradientn(
    colours = greens,
    name = expression(paste('Individual kelp growth (g DW)', sep=''))
  ) +
  theme(legend.position = "top")

plot_zoom <- plots_N[[1]] +
  geom_polygon(data=coords[which(coords$loc=='area'),], aes(x=x, y=y), colour="black", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj1'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj2'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_polygon(data=coords[which(coords$loc=='proj3'),], aes(x=x, y=y), colour="red", fill=NA) +
  geom_point(aes(x = j_ind, y = i_ind), color = "white", size = 3) +
  coord_cartesian(xlim = c(j_ind - 10, j_ind + 10), ylim = c(i_ind - 10, i_ind + 10)) +
  scale_fill_gradientn(
    colours = greens,
    name = expression(paste('Individual kelp growth (g DW)', sep=''))
  ) +
  theme(legend.position = "top")


final_plot <- (plot_full | plot_zoom) + 
  plot_layout(guides = "collect") &
  theme_minimal(base_size = 12) &
  theme(legend.position = "top",
  legend.key.width = unit(2, "cm"), 
  legend.key.height = unit(0.4, "cm"), 
  legend.text = element_text(size = 10),
  legend.title = element_text(size = 12, face = "bold"))

final_plot
print(size_value)

#ggsave("plots/production_minmax.jpg", width = 8, height = 5, dpi = 300)
#ggsave("plots/production_minmax.svg", width = 8, height = 5, dpi = 300)
```

```{r}
#Check growth at a certain location 

### testing the central point 
i <- 93
j <- 141

i_lat <- prod3$lat[j, i]
j_lon <- prod3$lon[j, i]
  
cell_forcings <- forcings %>%
    mutate(N = (nit_df$nit_mol[nit_df$x == i & nit_df$y == j])*1000)

#write.csv(cell_forcings, here::here("data", "forcings_93_141.csv"), row.names = FALSE)

#deployment_date_time <- 
#harvest_date_time    <- 

deployment_date_time <- as.POSIXct("2020-01-01 00:00:00")
#deployment_date_time <- min(forcings$datetime)
harvest_date_time    <- max(forcings$datetime)

kelp_run11 <- single_kelp_run(
    forcings = cell_forcings,
    deployment_date_time = deployment_date_time,
    harvest_date_time = harvest_date_time,
    params = params,
    initial_state = initial_state)


ggplot() + 
  geom_smooth(aes(x = kelp_run11$datetime, y =kelp_run11$W), size = 1.2) +
  labs(x = "2019-2020", y = "Weight (g DW)") + 
  theme_minimal() +
  scale_x_datetime(date_labels = "%b", breaks = "month")



#FORCINGS
summary_cell <- cell_forcings %>% 
  mutate(datetime = as.POSIXct(datetime),        # Convert to POSIXct
         date = as.Date(datetime) ,  
         temperature = temperature - 273.15) %>% # Convert from Kelvin to Celsius
  group_by(date) %>% 
  summarise(
    sum_I = sum(I, na.rm = TRUE),                # Sum of irradiance per day
    mean_T = mean(temperature, na.rm = TRUE),    # Mean temperature per day
    mean_speed = mean(abs(speed), na.rm = TRUE),
    mean_N = mean(N, na.rm = TRUE)               # Mean Nitrite/Nitrate per day
  ) %>% 
  mutate(date = as.POSIXct(date))

#Plot Irradiance 
I_plot <- ggplot() + 
  geom_line(data = summary_cell, aes(x = date, y = sum_I), color = "#EBB540", size = 0.8) + 
  labs(y = expression(paste('mol I# ',m^-1, d^-1, sep='')),
       title = "Sum of Irradiance pr. day", 
       x = "2019-2020") + 
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  
    panel.grid.minor.x = element_blank()
  )

#Plot temperature 
temp_plot <- ggplot() + 
  geom_line(data = summary_cell, aes(x = date, y = mean_T), color = "#0273B3", size = 0.8) +
  labs(y = "Celsius", 
       title = "Average Temperature pr. day", 
       x = "2019-2020") + 
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  
    panel.grid.minor.x = element_blank()
  )

#Plot Nitrite Nitrate 
N_plot <- ggplot() + 
  geom_line(data = summary_cell, aes(x = date, y = mean_N), colour = "#CF81AC", size = 0.8) +
  labs(x = "2019-2020", 
       y = expression(paste('mol N ',L^-1, sep='')), 
       title = "Inorganic Nitrogen"  ) +
  scale_x_datetime(date_labels = "%b", breaks = "month") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  
    panel.grid.minor.x = element_blank()
  )

I_plot
temp_plot
N_plot
```
